declare function isExternal(href: any): boolean;
declare function isDataURI(href: any): boolean;
declare function isRelative(href: any): boolean;
declare function isAnchor(href: any): boolean;
declare function normalize(s: any): string;
/**
 * Flatten a path, it removes the leading "/"
 *
 * @param {string} href
 * @return {string}
 */
declare function flatten(href: any): any;
/**
 * Convert a relative path to absolute
 *
 * @param {string} _href
 * @param {string} dir: directory parent of the file currently in rendering process
 * @param {string} outdir: directory parent from the html output
 * @return {string}
 */
declare function toAbsolute(_href: any, dir: any, outdir: any): any;
/**
 * Convert an absolute path to a relative path for a specific folder (dir)
 * ('test/', 'hello.md') -> '../hello.md'
 *
 * @param {string} dir: current directory
 * @param {string} file: absolute path of file
 * @return {string}
 */
declare function relative(dir: any, file: any): string;
/**
 * Convert an absolute path to a relative path for a specific folder (dir)
 * ('test/test.md', 'hello.md') -> '../hello.md'
 *
 * @param {string} baseFile: current file
 * @param {string} file: absolute path of file
 * @return {string}
 */
declare function relativeForFile(baseFile: any, file: any): string;
/**
 * Compare two paths, return true if they are identical
 * ('README.md', './README.md') -> true
 *
 * @param {string} p1: first path
 * @param {string} p2: second path
 * @return {boolean}
 */
declare function areIdenticalPaths(p1: any, p2: any): boolean;
declare const _default: {
    areIdenticalPaths: typeof areIdenticalPaths;
    isDataURI: typeof isDataURI;
    isExternal: typeof isExternal;
    isRelative: typeof isRelative;
    isAnchor: typeof isAnchor;
    normalize: typeof normalize;
    toAbsolute: typeof toAbsolute;
    relative: typeof relative;
    relativeForFile: typeof relativeForFile;
    flatten: typeof flatten;
};
export default _default;
//# sourceMappingURL=location.d.ts.map