"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("../../utils/fs"));
const location_1 = __importDefault(require("../../utils/location"));
const editHTMLElement_1 = __importDefault(require("./editHTMLElement"));
const cheerio = __importStar(require("cheerio"));
/**
 Inline SVG images as needed

 @param {string} rootFolder
 @param {HTMLDom} $
 @return {Promise}
 */
function inlineSvg(rootFolder, currentFile, $) {
    const currentDirectory = path_1.default.dirname(currentFile);
    return (0, editHTMLElement_1.default)($, "img", ($img) => {
        let src = $img.attr("src");
        if (path_1.default.extname(src) !== ".svg") {
            return;
        }
        // Calcul absolute path for this
        src = location_1.default.toAbsolute(src, currentDirectory, ".");
        const inputPath = path_1.default.join(rootFolder, src);
        return fs_1.default.readFile(inputPath).then((svgContext) => {
            // @ts-expect-error
            const $ = cheerio.load(svgContext, { _useHtmlParser2: true, xmlMode: true });
            const $svg = $("svg");
            if ($svg.attr("style")) {
                return;
            }
            $svg.attr("fill", "currentColor");
            $img.replaceWith($svg);
        });
    });
}
exports.default = inlineSvg;
