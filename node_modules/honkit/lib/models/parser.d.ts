import Immutable from "immutable";
export type ParserOptions = {
    baseDirectory: string;
};
declare const Parser_base: Immutable.Record.Class;
declare class Parser extends Parser_base {
    getName(): string;
    getExtensions(): Immutable.List<string>;
    parseReadme(content: string, options: ParserOptions): any;
    parseSummary(content: string, options: ParserOptions): any;
    parseGlossary(content: string, options: ParserOptions): any;
    preparePage(content: string): any;
    parsePage(content: string, options: ParserOptions): any;
    parseInline(content: string, options: ParserOptions): any;
    parseLanguages(content: string, options: ParserOptions): any;
    renderLanguages(content: any): any;
    renderSummary(content: any): any;
    renderGlossary(content: any): any;
    /**
     Test if this parser matches an extension

     @param {string} ext
     @return {boolean}
     */
    matchExtension(ext: string): boolean;
    /**
     Create a new parser using a module (gitbook-markdown, etc)

     @param {string} name
     @param {Array<String>} extensions
     @param {Object} module
     @return {Parsers}
     */
    static create(name: string, extensions: string[] | Immutable.Iterable.Indexed<unknown>, module: {
        readme: any;
        langs: any;
        summary: any;
        glossary: any;
        page: any;
        inline: any;
    }): Parser;
}
export default Parser;
//# sourceMappingURL=parser.d.ts.map