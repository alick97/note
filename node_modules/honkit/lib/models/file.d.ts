import fs from "fs";
import Immutable from "immutable";
import Parser from "./parser";
declare const File_base: Immutable.Record.Class;
declare class File extends File_base {
    getPath(): string;
    getMTime(): Date;
    /**
     Does the file exists / is set

     @return {boolean}
     */
    exists(): boolean;
    /**
     Return type of file ('markdown' or 'asciidoc')

     @return {string}
     */
    getType(): string;
    /**
     Return extension of this file (lowercased)

     @return {string}
     */
    getExtension(): string;
    /**
     Return parser for this file

     @return {Parsers}
     */
    getParser(): Parser;
    /**
     Return basedirectory of this file
     @return {string}
     */
    getBaseDirectory(): string;
    /**
     Create a file from stats informations

     @param {string} filepath
     @param {Object|fs.Stats} stat
     @return {File}
     */
    static createFromStat(filepath: string, stat: fs.Stats): File;
    /**
     Create a file with only a path
     @param {string} filepath
     @return {File}
     */
    static createWithFilepath(filepath: string): File;
}
export default File;
//# sourceMappingURL=file.d.ts.map