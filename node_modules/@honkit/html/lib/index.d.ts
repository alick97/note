import { SummaryPart } from "./summary";
/**
 * Utility for loading HTML content
 */
export { loadHtml } from "./dom";
export type ToHTMLOptions = {
    baseDirectory: string;
};
export type ToHTMLFunction = (content: string, options?: ToHTMLOptions) => string;
export type ToTextFunction = (content: any) => string;
export type { SummaryPart };
export type ParserSummary = ((content: string, options?: ToHTMLOptions) => {
    parts: SummaryPart[];
}) & {
    toText: ToTextFunction;
};
export type ParserGlossary = ((content: string, options?: ToHTMLOptions) => string[]) & {
    toText: ToTextFunction;
};
export type ParserLangs = ((content: string, options?: ToHTMLOptions) => string[]) & {
    toText: ToTextFunction;
};
export type ParserREADME = (content: string, options?: ToHTMLOptions) => {
    title: string;
    description: string;
};
export type ParserPage = ((content: string, options?: ToHTMLOptions) => {
    content: string;
}) & {
    prepare?: (content: string, options?: ToHTMLOptions) => string;
};
export type ParserInline = (content: string, options?: ToHTMLOptions) => {
    content: string;
};
export type Parsers = {
    summary: ParserSummary;
    glossary: ParserGlossary;
    langs: ParserLangs;
    readme: ParserREADME;
    page: ParserPage;
    inline: ParserInline;
};
declare function createParser(toHTML: any, toText?: any): Parsers;
declare const defaultParser: Parsers;
export { defaultParser as default, createParser };
//# sourceMappingURL=index.d.ts.map